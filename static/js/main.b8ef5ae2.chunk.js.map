{"version":3,"sources":["components/PostList/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm/NewCommentForm.tsx","services/comments.ts","components/PostDetails/PostDetails.tsx","components/UserSelector/UserSelector.tsx","services/users.ts","App.tsx","services/posts.ts","index.tsx"],"names":["PostsList","posts","selectedPost","setSelectedPost","className","map","post","id","title","type","classNames","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","setComments","useState","commentName","setCommentName","commentEmail","setCommentEmail","commentText","setCommentText","commentNameError","setCommentNameError","commentEmailError","setCommentEmailError","commentTextError","setCommentTextError","isLoading","setIsLoading","handleButtonSubmit","event","preventDefault","trim","newComment","postId","name","email","createdComment","prevComments","finally","htmlFor","value","placeholder","onChange","target","PostDetails","comments","commentsAreLoading","setCommentsAreLoading","errorInCommentsOccured","setErrorInCommentsOccured","isButtonClicked","setIsButtonClicked","useEffect","currentComments","catch","handleDelete","commentId","deleteComment","filter","comment","length","href","UserSelector","isActive","setIsActive","selectedUser","setSelectedUser","setErrorOccured","users","setUsers","dropDownButtonRef","useRef","handleClickOutside","current","contains","document","addEventListener","removeEventListener","ref","role","user","App","setPosts","errorOccured","userId","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b8ef5ae2.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost: (post: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        {posts.map(post => (\n          <tbody key={post.id}>\n            <tr data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link', {\n                    'is-light': selectedPost?.id !== post.id,\n                  })}\n                  onClick={() => {\n                    setSelectedPost(selectedPost?.id !== post.id\n                      ? post : null);\n                  }}\n                >\n                  {selectedPost?.id === post.id ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        ))}\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { createComment } from '../../services/comments';\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\n\ntype Props = {\n  selectedPost: Post;\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n  setComments,\n}) => {\n  const [commentName, setCommentName] = useState('');\n  const [commentEmail, setCommentEmail] = useState('');\n  const [commentText, setCommentText] = useState('');\n  const [commentNameError, setCommentNameError] = useState(false);\n  const [commentEmailError, setCommentEmailError] = useState(false);\n  const [commentTextError, setCommentTextError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleButtonSubmit = (\n    event: React.FormEvent<HTMLButtonElement>,\n  ) => {\n    event.preventDefault();\n\n    if (commentName.trim() && commentEmail.trim() && commentText.trim()) {\n      setIsLoading(true);\n\n      const newComment = {\n        id: 0,\n        postId: selectedPost.id,\n        name: commentName,\n        email: commentEmail,\n        body: commentText,\n      };\n\n      createComment(newComment)\n        .then((createdComment) => {\n          setComments(prevComments => [...prevComments, createdComment]);\n          setCommentText('');\n        })\n        .finally(() => setIsLoading(false));\n    }\n\n    if (!commentName) {\n      setCommentNameError(true);\n    }\n\n    if (!commentEmail) {\n      setCommentEmailError(true);\n    }\n\n    if (!commentText) {\n      setCommentTextError(true);\n    }\n  };\n\n  const handleButtonReset = () => {\n    setCommentName('');\n    setCommentEmail('');\n    setCommentText('');\n    setCommentNameError(false);\n    setCommentEmailError(false);\n    setCommentTextError(false);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={commentName}\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': commentNameError,\n            })}\n            onChange={(event) => {\n              setCommentName(event.target.value);\n              setCommentNameError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {commentNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {commentNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={commentEmail}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': commentEmailError,\n            })}\n            onChange={(event) => {\n              setCommentEmail(event.target.value);\n              setCommentEmailError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {commentEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {commentEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={commentText}\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': commentTextError,\n            })}\n            onChange={(event) => {\n              setCommentText(event.target.value);\n              setCommentTextError(false);\n            }}\n          />\n        </div>\n\n        {commentTextError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoading,\n            })}\n            onClick={(event) => handleButtonSubmit(event)}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleButtonReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const createComment = (data: Comment) => {\n  return client.post<Comment>('/comments', data);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm/NewCommentForm';\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\nimport { deleteComment, getComments } from '../../services/comments';\n\ntype Props = {\n  selectedPost: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPost }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [commentsAreLoading, setCommentsAreLoading] = useState(false);\n  const [errorInCommentsOccured, setErrorInCommentsOccured] = useState(false);\n  const [isButtonClicked, setIsButtonClicked] = useState(false);\n\n  useEffect(() => {\n    setCommentsAreLoading(true);\n\n    if (selectedPost) {\n      getComments(selectedPost.id)\n        .then((currentComments) => {\n          setComments(currentComments);\n          setIsButtonClicked(false);\n        })\n        .catch(() => setErrorInCommentsOccured(true))\n        .finally(() => {\n          setCommentsAreLoading(false);\n        });\n    }\n  }, [selectedPost.id, selectedPost]);\n\n  const handleDelete = (commentId: number) => {\n    deleteComment(commentId)\n      .then(() => {\n        setComments(currentComments => currentComments.filter(\n          comment => comment.id !== commentId,\n        ));\n      })\n      .catch(() => setErrorInCommentsOccured(true));\n  };\n\n  const handleButtonClick = () => {\n    setIsButtonClicked(true);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id} ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {commentsAreLoading && (\n            <Loader />\n          )}\n\n          {errorInCommentsOccured && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {comments.length === 0 && !commentsAreLoading && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {comments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {comments.map(comment => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDelete(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {!isButtonClicked && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleButtonClick}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isButtonClicked && (\n          <NewCommentForm\n            selectedPost={selectedPost}\n            setComments={setComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { User } from '../../types/User';\nimport { getUsers } from '../../services/users';\n\ntype Props = {\n  isActive: boolean;\n  setIsActive: (dataType: boolean) => void;\n  selectedUser: User | null;\n  setSelectedUser: (user: User) => void;\n  setErrorOccured: (error: string) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  isActive,\n  setIsActive,\n  selectedUser,\n  setSelectedUser,\n  setErrorOccured,\n}) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const dropDownButtonRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => {\n        setErrorOccured('Something went wrong!');\n      });\n  }, [setErrorOccured]);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropDownButtonRef.current\n        && !dropDownButtonRef.current.contains(event.target as Node)) {\n        setIsActive(false);\n      }\n    };\n\n    document.addEventListener('click', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [setIsActive]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isActive,\n      })}\n      ref={dropDownButtonRef}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsActive(!isActive)}\n        >\n          <span>{selectedUser ? selectedUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className=\"dropdown-item\"\n              onClick={() => setSelectedUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostList/PostsList';\nimport { PostDetails } from './components/PostDetails/PostDetails';\nimport { UserSelector } from './components/UserSelector/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUserPosts } from './services/posts';\n\nexport const App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [errorOccured, setErrorOccured] = useState('');\n  const [isActive, setIsActive] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setIsLoading(true);\n      setPosts([]);\n      setIsActive(false);\n      getUserPosts(selectedUser.id)\n        .then(setPosts)\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  setErrorOccured={setErrorOccured}\n                  isActive={isActive}\n                  setIsActive={setIsActive}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (\n                  <Loader />\n                )}\n\n                {errorOccured && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorOccured}\n                  </div>\n                )}\n\n                {posts.length === 0 && selectedUser && !isLoading && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n                {posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          {selectedPost && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  selectedPost={selectedPost}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}